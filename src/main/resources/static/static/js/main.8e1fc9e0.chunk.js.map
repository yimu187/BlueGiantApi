{"version":3,"sources":["components/WelcomePage/index.js","components/NewRecordPage/index.js","components/ListPage/index.js","App.js","serviceWorker.js","index.js"],"names":["WelcomePage","react_default","a","createElement","style","textAlign","NewRecordPage","props","modelOpened","onDeleteClick","onSaveClick","onRenewClick","Form","Group","display","Field","Input","placeholder","id","value","formData","ad","onChange","onFormDataChanged","soyad","TextArea","adres","dogumYeri","Button","floated","primary","onClick","color","textAlingCenter","ListPage","tableData","onIconClick","loading","Dimmer","active","Loader","Table","celled","Header","Row","HeaderCell","width","Body","map","tableItem","key","Cell","Icon","name","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","activeItem","windowFormData","confirmOpened","field","event","assertThisInitialized","setState","setConfirmWindowOpened","self","axios","post","then","response","data","success","message","dto","notifySuccess","notifyFailure","catch","error","console","log","handleItemClick","e","_ref","sendListRequest","get","list","toast","position","POSITION","TOP_RIGHT","autoClose","setModelOpened","filteredItems","filter","tableDataItem","length","filterdItem","onConfirmCancel","onConfirmed","delete","bind","document","title","opened","_this2","_this$state","welcomPage","newRecord","listing","react_toastify_esm","Grid","Column","Menu","fluid","vertical","tabular","Item","stretched","Segment","components_WelcomePage","components_NewRecordPage","components_ListPage","Modal","onClose","onOpen","open","Content","Confirm","content","cancelButton","confirmButton","onCancel","onConfirm","Component","Boolean","window","location","hostname","match","styleLink","rel","href","head","appendChild","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8e1fc9e0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst WelcomePage = () => {\r\n\r\n    return (<div style={{textAlign: 'center'}}>\r\n        Bilgi Giriş Uygulamasına Hoş Geldiniz\r\n        Welcome to info entrance app v1.0.7\r\n    </div>)\r\n}\r\n\r\nexport default WelcomePage","import React from 'react';\r\nimport {Form, Input, Button, TextArea} from 'semantic-ui-react';\r\n\r\n\r\nconst NewRecordPage = (props) => {\r\n\r\n    const {modelOpened, onDeleteClick, onSaveClick, onRenewClick} = props;\r\n\r\n    return (\r\n\r\n        <div>\r\n            <Form >\r\n                <Form.Group  style={{display: 'none'}}>\r\n                    <Form.Field>\r\n                        <Input\r\n                            placeholder={'id'}\r\n                            id=\"id\"\r\n                            value={props.formData.id}\r\n                            // onChange={props.onFormDataChanged}\r\n                        />\r\n                    </Form.Field>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Field>\r\n                        <Input\r\n                            placeholder={'Ad Bilgisi giriniz'}\r\n                            id=\"ad\"\r\n                            value={props.formData.ad}\r\n                            onChange={props.onFormDataChanged}\r\n                        />\r\n                    </Form.Field>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Field>\r\n                        <Input\r\n                            placeholder={'Soyad Bilgisi giriniz'}\r\n                            id=\"soyad\"\r\n                            value={props.formData.soyad}\r\n                            onChange={props.onFormDataChanged}\r\n                        />\r\n                    </Form.Field>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Field>\r\n                        <TextArea\r\n                            placeholder={'Adres Bilgisi giriniz'}\r\n                            id=\"adres\"\r\n                            value={props.formData.adres}\r\n                            onChange={props.onFormDataChanged}\r\n                        />\r\n                    </Form.Field>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Field>\r\n                        <Input\r\n                            placeholder={'Doğum Yeri'}\r\n                            id=\"dogumYeri\"\r\n                            value={props.formData.dogumYeri}\r\n                            onChange={props.onFormDataChanged}\r\n                        />\r\n                    </Form.Field>\r\n                </Form.Group>\r\n\r\n            </Form>\r\n            <Button floated='right' primary onClick={onSaveClick} >Kaydet</Button>\r\n            {modelOpened && (<Button color='red' floated='right' onClick={onDeleteClick} >Sil</Button>)}\r\n            {!modelOpened && (<Button floated='right' onClick={onRenewClick} >Yenile</Button>)}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewRecordPage;","import React from 'react'\r\nimport { Icon, Dimmer, Loader,  Menu, Table } from 'semantic-ui-react'\r\n\r\nconst textAlingCenter = {textAlign: 'center'};\r\n\r\nconst ListPage = (props) => {\r\n\r\n    const { tableData, onIconClick, loading } = props;\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Dimmer active={loading}>\r\n                <Loader>Yükleniyor</Loader>\r\n            </Dimmer>\r\n\r\n            <Table celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell width={5} style={textAlingCenter}>Ad</Table.HeaderCell>\r\n                        <Table.HeaderCell width={5} style={textAlingCenter}>Soyad</Table.HeaderCell>\r\n                        <Table.HeaderCell width={10} style={textAlingCenter}>Adres</Table.HeaderCell>\r\n                        <Table.HeaderCell width={10} style={textAlingCenter}>Doğum Yeri</Table.HeaderCell>\r\n                        <Table.HeaderCell width={2} style={textAlingCenter}>İşlem</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n\r\n                <Table.Body>\r\n                    {tableData.map((tableItem) => {\r\n                        return (\r\n                            <Table.Row celled key={tableItem.id}>\r\n                                <Table.Cell style={textAlingCenter}>{tableItem.ad}</Table.Cell>\r\n                                <Table.Cell style={textAlingCenter}>{tableItem.soyad}</Table.Cell>\r\n                                <Table.Cell style={textAlingCenter}>{tableItem.adres}</Table.Cell>\r\n                                <Table.Cell style={textAlingCenter}>{tableItem.dogumYeri}</Table.Cell>\r\n                                <Table.Cell style={textAlingCenter}>\r\n                                    <Icon name='pencil' id={tableItem.id} onClick={onIconClick}/>\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        )\r\n                    })}\r\n                </Table.Body>\r\n            </Table>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListPage;","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {Grid, Menu, Segment, Modal, Confirm} from 'semantic-ui-react';\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport WelcomePage from \"./components/WelcomePage\";\r\nimport NewRecordPage from \"./components/NewRecordPage\";\r\nimport ListPage from \"./components/ListPage\";\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        modelOpened: false,\r\n        activeItem: 'Giriş',\r\n        formData: {\r\n            id: null,\r\n            ad: '',\r\n            soyad: '',\r\n            adres: '',\r\n        },\r\n        windowFormData: {\r\n            id: null,\r\n            ad: '',\r\n            soyad: '',\r\n            adres: '',\r\n        },\r\n        tableData:[],\r\n        loading: false,\r\n        confirmOpened: false,\r\n    }\r\n\r\n    constructor(){\r\n        super();\r\n        this.onFormDataChanged = this.onFormDataChanged.bind(this);\r\n\r\n        document.title = 'Task Page';\r\n    }\r\n\r\n    onFormDataChanged = (field, event) =>  {\r\n\r\n        const { state } = this;\r\n        const { modelOpened } = state;\r\n        if(!modelOpened){\r\n            const { id, value } = event\r\n            const formData = this.state.formData;\r\n            formData[id] = value;\r\n            this.setState(formData);\r\n        }else{\r\n            const { id, value } = event\r\n            const windowFormData = this.state.windowFormData;\r\n            windowFormData[id] = value;\r\n            this.setState(windowFormData);\r\n        }\r\n\r\n    }\r\n\r\n    onDeleteClick = () => {\r\n        this.setConfirmWindowOpened(true);\r\n    }\r\n\r\n    onRenewClick = () => {\r\n        this.setState({\r\n            formData: {\r\n                id: null,\r\n                ad: '',\r\n                soyad: '',\r\n                adres: '',\r\n                dogumYeri: '',\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    onSaveClick = () => {\r\n\r\n        const { state } = this;\r\n        const { modelOpened } = state;\r\n\r\n        const formData = !modelOpened ? this.state.formData : this.state.windowFormData;\r\n        var self = this;\r\n        axios.post('/formData', formData)\r\n            .then(function (response) {\r\n                const { data } = response;\r\n                const { success, message, dto } = data;\r\n                if(success === true){\r\n                    self.notifySuccess(message);\r\n                    if(modelOpened){\r\n                        self.setState({\r\n                            windowFormData: dto\r\n                        });\r\n                    }else{\r\n                        self.setState({\r\n                            formData: dto\r\n                        });\r\n                    }\r\n                }else{\r\n                    self.notifyFailure(message);\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                self.notifyFailure(\"Hata Durum oluşmuştur. Lütfen Sistem Yöneticiniz ile görüşünüz\");\r\n            });\r\n    };\r\n\r\n\r\n    handleItemClick = (e, { name }) => {\r\n        if(name === 'Listeleme'){\r\n            this.sendListRequest();\r\n        }\r\n        this.setState({ activeItem: name })\r\n    };\r\n\r\n    sendListRequest = () => {\r\n        var self = this;\r\n        const url = '/formData';\r\n        this.setState({loading: true})\r\n        axios.get(url)\r\n            .then(function (response) {\r\n                const { data } = response;\r\n                const { success, message, list } = data;\r\n                if(success === true){\r\n                    self.notifySuccess(message);\r\n                    self.setState({\r\n                        tableData: list,\r\n                        loading:false\r\n                    });\r\n                }else{\r\n                    self.notifyFailure(message);\r\n                    self.setState({\r\n                        loading:false\r\n                    });\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                self.setState({\r\n                    tableData: [{id: 1, ad: 'adi', soyad: 'soyad', adres: 'adres'}, {id: 2, ad: 'adi', soyad: 'soyad', adres: 'adres'}],\r\n                    loading:false\r\n                });\r\n            })\r\n    }\r\n\r\n    notifySuccess = (message) => {\r\n        toast.success(message, {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            autoClose: 5000,\r\n        });\r\n    }\r\n\r\n    notifyFailure = (message)  =>{\r\n        toast.error(message, {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            autoClose: 5000,\r\n        });\r\n    }\r\n\r\n    setModelOpened = (modelOpened) => {\r\n        this.setState({\r\n            modelOpened\r\n        })\r\n    }\r\n\r\n    onIconClick = (event, field) => {\r\n        const {id} = field;\r\n        const {tableData} = this.state;\r\n\r\n        const filteredItems = tableData.filter(tableDataItem => {\r\n            return tableDataItem.id === id\r\n        });\r\n        if(filteredItems.length > 0){\r\n            const filterdItem = filteredItems[0];\r\n            this.setState({\r\n                modelOpened: true,\r\n                windowFormData: filterdItem\r\n            })\r\n        }else {\r\n            this.notifyFailure(id + \" numaralı kayıt liste içinde bulunamıştır\");\r\n        }\r\n    }\r\n\r\n    onConfirmCancel = () => {\r\n        this.setConfirmWindowOpened(false);\r\n    }\r\n\r\n    setConfirmWindowOpened(opened) {\r\n        this.setState({\r\n            confirmOpened: opened\r\n        })\r\n    }\r\n\r\n    onConfirmed = () => {\r\n        const { state } = this;\r\n        const { modelOpened } = state;\r\n\r\n        if(modelOpened){\r\n            const windowFormData = this.state.windowFormData;\r\n\r\n            var self = this;\r\n            axios.delete('/formData',\r\n                {\r\n                    data: windowFormData\r\n                }\r\n\r\n            )\r\n                .then(function (response) {\r\n                    const { data } = response;\r\n                    const { success, message } = data;\r\n                    if(success === true){\r\n                        self.notifySuccess(message);\r\n                        self.setModelOpened(false);\r\n                        self.sendListRequest();\r\n                        self.setConfirmWindowOpened(false);\r\n\r\n                    }else{\r\n                        self.notifyFailure(message);\r\n                    }\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error);\r\n                    self.notifyFailure(\"HataonRenewClick Durum oluşmuştur. Lütfen Sistem Yöneticiniz ile görüşünüz\");\r\n                });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { activeItem, formData, tableData, modelOpened, windowFormData, loading, confirmOpened } = this.state\r\n        const welcomPage = activeItem === 'Giriş';\r\n        const newRecord = activeItem === 'Yeni Kayıt';\r\n        const listing = activeItem === 'Listeleme';\r\n\r\n        return (\r\n            <div>\r\n                <ToastContainer />\r\n                <Grid>\r\n                    <Grid.Column width={3}>\r\n                        <Menu fluid vertical tabular>\r\n                            <Menu.Item\r\n                                name='Giriş'\r\n                                active={welcomPage}\r\n                                onClick={this.handleItemClick}\r\n                            />\r\n                            <Menu.Item\r\n                                name='Yeni Kayıt'\r\n                                active={newRecord}\r\n                                onClick={this.handleItemClick}\r\n                            />\r\n                            <Menu.Item\r\n                                name='Listeleme'\r\n                                active={listing}\r\n                                onClick={this.handleItemClick}\r\n                            />\r\n                        </Menu>\r\n                    </Grid.Column>\r\n\r\n                    <Grid.Column stretched width={12}>\r\n                        <Segment>\r\n                            {welcomPage && (<WelcomePage/>)}\r\n                            {newRecord && (<NewRecordPage formData={formData} onFormDataChanged={this.onFormDataChanged} onSaveClick={this.onSaveClick} modelOpened={modelOpened} onRenewClick={this.onRenewClick}/>)}\r\n                            {listing && (<ListPage tableData={tableData} onIconClick={this.onIconClick} loading={loading}/>)}\r\n                        </Segment>\r\n                    </Grid.Column>\r\n                </Grid>\r\n\r\n                <Modal\r\n                    onClose={() => this.setModelOpened(false)}\r\n                    onOpen={() => this.setModelOpened(true)}\r\n                    open={modelOpened}\r\n                >\r\n                    <Modal.Content>\r\n                        <NewRecordPage formData={windowFormData} onFormDataChanged={this.onFormDataChanged} onSaveClick={this.onSaveClick} onDeleteClick={this.onDeleteClick} modelOpened={modelOpened}/>\r\n                    </Modal.Content>\r\n                </Modal>\r\n                <Confirm\r\n                    open={confirmOpened}\r\n                    content='Silme işlemi gerçekleştirilecektir. Onaylıyor musunuz?'\r\n                    cancelButton='İptal Et'\r\n                    confirmButton=\"Onayla\"\r\n                    onCancel={this.onConfirmCancel}\r\n                    onConfirm={this.onConfirmed}\r\n                />\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}